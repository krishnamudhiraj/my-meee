{"version":3,"file":"10.cff43ca9593a0fa0efc1.hot-update.js","sources":["webpack:///redux/reducers/admin/actions.js","webpack:///services/admins.js"],"sourcesContent":["import {\n  ON_AUTHORISATION_REQUESTED,\n  ON_AUTHORISATION_COMPLETED,\n  ON_AUTHORISATION_FAILED,\n} from './types';\nimport { authCheck } from '../../../services/admins';\n\nexport const adminAuth = auth => async (dispatch, getState) => {\n  dispatch({ type: ON_AUTHORISATION_REQUESTED });\n  const { response, message } = await authCheck(auth);\n  if (response) {\n    dispatch({ type: ON_AUTHORISATION_COMPLETED, email: auth.email });\n    return true;\n  } else {\n    dispatch({ type: ON_AUTHORISATION_FAILED, message });\n    setTimeout(() => {\n      dispatch({ type: ON_AUTHORISATION_FAILED, message: '' });\n    }, 5000);\n    return false;\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// redux/reducers/admin/actions.js","import { has } from 'lodash';\n// import { firebaseApp } from '../config/firebase';\nimport firebase from 'firebase/app';\nconst db = firebaseApp.firestore();\n\nexport const authCheck = auth =>\n  new Promise((resolve, reject) => {\n    console.log('search email', auth.email);\n\n    firebase\n      .auth()\n      .signInAndRetrieveDataWithEmailAndPassword(auth.email, auth.password)\n      .then(data => {\n        console.log('###################', data);\n      })\n      .catch(error => {\n        errorCode = error.code;\n        if (error.code !== 'auth/user-not-found') {\n          Alert.alert('Sign in failed', 'Username or Password is incorrect');\n          throw new Error('Authentcation Failed');\n        }\n      });\n    // db.collection('/admins')\n    //   .where('email', '==', auth.email)\n    //   .get()\n    //   .then(snapshot => {\n    //     snapshot.forEach(doc => {\n    //       if (doc.data().password === auth.password) {\n    //         resolve({ response: true, message: 'Authorised Email' });\n    //       } else {\n    //         resolve({ response: false, message: 'Wrong Password' });\n    //       }\n    //     });\n    //     resolve({\n    //       response: false,\n    //       message: 'This Email ID is not Authorised to generate codes.'\n    //     });\n    //   })\n    //   .catch(err => {\n    //     console.log('Error: ', err);\n    //     reject(err);\n    //   });\n  });\n\n\n\n// WEBPACK FOOTER //\n// services/admins.js"],"mappings":";;;;;;;;;;;;;;;AAAA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAJA;AACA;AADA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAVA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AAIA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;;;;A","sourceRoot":""}