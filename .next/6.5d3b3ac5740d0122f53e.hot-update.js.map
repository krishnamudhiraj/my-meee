{"version":3,"file":"6.5d3b3ac5740d0122f53e.hot-update.js","sources":["webpack:///redux/reducers/getStarted/actions.js","webpack:///services/code.js"],"sourcesContent":["import { ON_SIGNUP_REQUESTED, ON_SIGNUP_COMPLETED, ON_SIGNUP_FAILED, ON_UPDATE_USER_REQUESTED, ON_UPDATE_USER_COMPLETED } from './types';\nimport { searchCode, updateCodeUsed, searchSchoolCode } from '../../../services/code';\nimport { updateUserData } from '../../../services/schools';\nimport { fetchUser } from '../../../services/users';\n\nexport const onSignupRequested = (code) => async (dispatch, getState) => {\n  // const {} = getState();\n  dispatch({ type: ON_SIGNUP_REQUESTED });\n\n  const codeData = await searchCode(Number(code));\n\n  if (codeData.response === false) {\n    dispatch({ type: ON_SIGNUP_FAILED, status: codeData.message });\n    return false;\n  } else {\n    const fetchUserData = await fetchUser(codeData.data.customer_id);\n    const { name, email } = fetchUserData.data;\n\n    await updateCodeUsed(codeData.id, code);\n    dispatch({ type: ON_SIGNUP_COMPLETED, status: 'success', name, email });\n    return true;\n  }\n};\n\nexport const onSchoolSignupRequested = (code) => async (dispatch, getState) => {\n  // const {} = getState();\n\n  dispatch({ type: ON_SIGNUP_REQUESTED });\n\n  const { response, message, id, data } = await searchSchoolCode(Number(code));\n  if (response) {\n    dispatch({\n      type: ON_SIGNUP_COMPLETED,\n      status: message,\n      schoolName: data.school_name,\n      schoolKey: id\n    });\n  } else {\n    dispatch({ type: ON_SIGNUP_FAILED, status: message });\n  }\n};\n\nexport const onUpdatingDeatils = (userData) => async (dispatch, getState) => {\n  // const {} = getState();\n\n  const { schoolUserKey } = getState().code;\n\n  dispatch({ type: ON_UPDATE_USER_REQUESTED });\n\n  const codeData = await updateUserData(schoolUserKey, userData);\n\n  if (codeData.response === false) {\n    dispatch({ type: ON_UPDATE_USER_COMPLETED, status: 'Failed to update user Data.' });\n  } else {\n    dispatch({ type: ON_UPDATE_USER_COMPLETED, status: 'success' });\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// redux/reducers/getStarted/actions.js","import { has } from 'lodash';\nimport { firebaseApp } from '../config/firebase';\nconst db = firebaseApp.firestore();\n\nexport const getCode = () => {\n  const codes = fetchCodes();\n  let flag = true;\n  let randomNumber = null;\n\n  while (flag) {\n    randomNumber = Math.floor(1000 + Math.random() * 9000);\n    if (!has(codes, randomNumber)) {\n      flag = false;\n    }\n  }\n\n  return randomNumber;\n};\n\nexport const fetchCodes = () => {\n  const codes = [];\n\n  db.collection('/codes').get().then(snapshot => {\n    snapshot.forEach(doc => {\n      const data = doc.data();\n      !data.is_code_used && codes.push(data.code);\n    });\n  }).catch(err => {\n    console.log('Error getting codes data: ', err);\n  });\n\n  return codes;\n};\n\nexport const searchCode = (code) => new Promise((resolve, reject) => {\n  db.collection('/codes')\n    .where('code', '==', code)\n    .get()\n    .then(snapshot => {\n      snapshot.forEach(doc => {\n        if (doc.data().is_code_used) {\n          resolve({ response: false, message: 'Code already used.' });\n        } else resolve({ id: doc.id, data: doc.data() });\n      });\n      resolve({ response: false, message: 'Code not found.' });\n    })\n    .catch(err => {\n      console.log('Error: ', err);\n\n      reject(err);\n    });\n});\n\nexport const searchSchoolCode = (code) => new Promise((resolve, reject) => {\n  db.collection('/schools')\n    .where('code', '==', code)\n    .get()\n    .then(snapshot => {\n      snapshot.forEach(doc => {\n        if (doc.data().is_code_used) {\n          resolve({ response: false, message: 'Code already used.' });\n        } else resolve({ id: doc.id, response: true, message: 'success', data: doc.data() });\n      });\n      resolve({ response: false, message: 'Code not found.' });\n    })\n    .catch(err => {\n      console.log('Error: ', err);\n\n      reject(err);\n    });\n});\n\nexport const updateCodeUsed = (key, code) => new Promise((resolve, reject) => {\n  db.collection('/codes')\n    .doc(key)\n    .update({ is_code_used: true })\n    .then(() => {\n      resolve(true);\n    })\n    .catch(err => {\n      reject(err);\n    });\n});\n\nexport const addCode = item => {\n  const code = getCode();\n\n  const codeData = {\n    customer_id: item.customer_id,\n    code,\n    is_code_used: false\n  };\n\n  db.collection('/codes')\n    .add(codeData)\n    .catch(err => {\n      console.log('Error adding Code: ', err);\n      return false;\n    });\n\n  return code;\n};\n\nexport const fetchAllowedUserAndCode = (key) => new Promise((resolve, reject) => {\n  // fetch allowed user and code\n  db.collection('/schools')\n    .doc(key)\n    .get()\n    .then(snapshot => {\n      resolve({\n        response: true,\n        code: snapshot.data().code,\n        allowedUser: snapshot.data().allowed_users\n      });\n    })\n    .catch(err => {\n      console.log('Error whil fetching allowed users: ', err);\n      reject({ response: false });\n    });\n});\n\nexport const checkTimesCodeAlreadyUsed = (code) => new Promise((resolve, reject) => {\n  let timeCodeAlreadyUsed = 0;\n  db.collection('/schoolsUsers')\n    .where('code', '==', code)\n    .get()\n    .then(snapshot => {\n      snapshot.forEach(() => {\n        timeCodeAlreadyUsed = timeCodeAlreadyUsed + 1;\n      });\n      resolve({ response: true, timeCodeAlreadyUsed });\n    })\n    .catch(err => {\n      console.log('Error whil fetching no. of times code already used: ', err);\n      reject({ response: false });\n    });\n});\n\nexport const setCodeUsed = (key) => new Promise((resolve, reject) => {\n  db.collection('/schools')\n    .doc(key)\n    .update({ is_code_used: true })\n    .then(() => {\n      resolve({ response: true, message: 'scuccessfully updated is_code_used' });\n    })\n    .catch(err => {\n      reject({ response: false, message: err });\n    });\n});\n\nexport const addSchoolUser = (code, schoolName) => new Promise((resolve, reject) => {\n  db.collection('/schoolsUsers')\n    .add({ code, school_name: schoolName })\n    .then((res) => {\n      resolve({\n        response: true,\n        message: 'Login Success',\n        schoolUserKey: res.id\n      });\n    })\n    .catch(err => {\n      console.log('Error while adding school user: ', err);\n      reject({ response: false, message: 'Error while adding school user' });\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// services/code.js"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAPA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAUA;AAVA;AAAA;AAAA;AACA;AADA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAHA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AALA;AAAA;AACA;AADA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAjBA;AAmBA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAjBA;AAmBA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAVA;AAYA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAhBA;AAkBA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAfA;AAiBA;AAAA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAVA;AAYA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAdA;;;;A","sourceRoot":""}